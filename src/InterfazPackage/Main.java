/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package InterfazPackage;

import Domain.ArbolAVL;
import Domain.ArbolAVLProfesion;
import Domain.ArbolAVLPromedio;
import DomainList.ListaDoble;
import DomainList.Nodo;
import DomainList.NodoDoble;
import MainPackage.AdministradorArchivos;
import MainPackage.Egresados;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *CLASE PRINCIPAL DE LA INTERFAZ
 * @author victo
 */
public class Main extends javax.swing.JFrame {

    DefaultListModel model = new DefaultListModel();

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        jList1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        Btnañadir = new javax.swing.JButton();
        botonParaListarProfesion = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        botonListarPromedio = new javax.swing.JButton();
        promedioTexto = new javax.swing.JTextField();
        butonConMezcla = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        limiteInferior = new javax.swing.JTextField();
        limiteSuperior = new javax.swing.JTextField();
        botonBuscarEgresado = new javax.swing.JButton();
        textoEgresadoBuscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        rutaDelArchivo = new javax.swing.JTextField();
        botonParaListarProfesionConPromedioRango = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        Btnañadir.setText("Listar");
        Btnañadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnañadirActionPerformed(evt);
            }
        });

        botonParaListarProfesion.setText("Listar profesión:");
        botonParaListarProfesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonParaListarProfesionActionPerformed(evt);
            }
        });

        jTextField1.setText("Ingrese un valor (profesión):");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        botonListarPromedio.setText("Listar promedio:");
        botonListarPromedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonListarPromedioActionPerformed(evt);
            }
        });

        promedioTexto.setText("Ingrese un valor (promedio):");

        butonConMezcla.setText("Listar por profesión y promedio");
        butonConMezcla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butonConMezclaActionPerformed(evt);
            }
        });

        jButton1.setText("Promedio en rango:");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("<Promedio<");

        limiteInferior.setText("Límite inferior");

        limiteSuperior.setText("Límite superior");
        limiteSuperior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limiteSuperiorActionPerformed(evt);
            }
        });

        botonBuscarEgresado.setText("Buscar egresado");
        botonBuscarEgresado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarEgresadoActionPerformed(evt);
            }
        });

        textoEgresadoBuscar.setText("Ingresa egresado");

        jLabel2.setText("RUTA DEL ARCHIVO (CSV): ");

        rutaDelArchivo.setText("Ingrese aquí la ruta:");
        rutaDelArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rutaDelArchivoActionPerformed(evt);
            }
        });

        botonParaListarProfesionConPromedioRango.setText("Listar rango promedio y prof");
        botonParaListarProfesionConPromedioRango.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonParaListarProfesionConPromedioRangoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(limiteInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(limiteSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonParaListarProfesionConPromedioRango)
                                .addGap(43, 43, 43)
                                .addComponent(botonBuscarEgresado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textoEgresadoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(Btnañadir)
                                .addGap(27, 27, 27)
                                .addComponent(botonParaListarProfesion)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonListarPromedio)
                                .addGap(18, 18, 18)
                                .addComponent(promedioTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(butonConMezcla))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rutaDelArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btnañadir)
                    .addComponent(botonParaListarProfesion)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonListarPromedio)
                    .addComponent(promedioTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butonConMezcla))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(limiteInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limiteSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscarEgresado)
                    .addComponent(textoEgresadoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonParaListarProfesionConPromedioRango))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rutaDelArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Función para listar en una jlist un archivo con formato csv
     * @param evt
     */
    private void BtnañadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnañadirActionPerformed
        // TODO add your handling code here:
        AdministradorArchivos admin = new AdministradorArchivos();
        String ruta = rutaDelArchivo.getText();

        ListaDoble lista = admin.getContentList(ruta);
        ArbolAVL arbolNombres = new ArbolAVL();
        NodoDoble nodoActual = new NodoDoble(); //Nodoactual
        nodoActual = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActual;
        while (nodoActual != null) {
            egresadoActual = (Egresados) nodoActual.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActual.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolNombres.setearRaiz(egresadoActual.getNombre(), (int) egresadoActual.getIndice());
            } else { //Si no es el primer elemento
                arbolNombres.insertar(egresadoActual.getNombre(), (int) egresadoActual.getIndice());
            }
            nodoActual = nodoActual.getSiguiente();
        }

        model.removeAllElements();
        NodoDoble elementoActual = new NodoDoble();
        Egresados egresadoActualJ = new Egresados();
        elementoActual = lista.getInicioListaDoble();
        egresadoActualJ = (Egresados) elementoActual.getDato();
        while (elementoActual != null) {
            egresadoActualJ = (Egresados) elementoActual.getDato();
            model.addElement(egresadoActualJ.getTexto());
            elementoActual = elementoActual.getSiguiente();
        }
    }//GEN-LAST:event_BtnañadirActionPerformed

    /**
     * Función para listar en una jlist las profesiones existentes de un archivo
     * con formato csv
     * @param evt
     */
    private void botonParaListarProfesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonParaListarProfesionActionPerformed
        // TODO add your handling code here:
        String profesion = jTextField1.getText();
        AdministradorArchivos admin = new AdministradorArchivos();
        String ruta = rutaDelArchivo.getText();
        ListaDoble lista = admin.getContentList(ruta);

        ArbolAVLProfesion arbolProfesiones = new ArbolAVLProfesion();
        NodoDoble nodoActualProfesion = new NodoDoble(); //Nodoactual
        nodoActualProfesion = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActualProfesion;
        while (nodoActualProfesion != null) {
            egresadoActualProfesion = (Egresados) nodoActualProfesion.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActualProfesion.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolProfesiones.setearRaiz(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
            } else { //Si no es el primer elemento
                arbolProfesiones.insertar(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
            }
            nodoActualProfesion = nodoActualProfesion.getSiguiente();
        }

        ListaDoble indices = new ListaDoble();
        indices = arbolProfesiones.obtenerListaDeProfesion(profesion);
        if (indices != null) {
            indices.imprimir();
            model.removeAllElements();

            Nodo indiceActual = new Nodo();
            NodoDoble elementoActual = new NodoDoble();
            elementoActual = lista.getInicioListaDoble();
            Egresados egresado;
            while (elementoActual != null) {
                egresado = (Egresados) elementoActual.getDato();
                indiceActual = indices.getInicio();
                while (indiceActual != null) {
                    if ((int) egresado.getIndice() == (int) indiceActual.getDato()) {
                        model.addElement(egresado.getTexto());
                    }
                    indiceActual = indiceActual.getSiguiente();
                }
                elementoActual = elementoActual.getSiguiente();
            }
        } else {
            JOptionPane.showMessageDialog(null, "La profesión no existe");
        }
    }//GEN-LAST:event_botonParaListarProfesionActionPerformed

    /**
     * @param evt
     */
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * Función para listar en una jlist los promedios existentes de un archivo
     * con formato csv.
     * @param evt
     */
    private void botonListarPromedioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonListarPromedioActionPerformed
        // TODO add your handling code here:
        String promedio = this.promedioTexto.getText();
        int promedioInt = Integer.parseInt(promedio);

        AdministradorArchivos admin = new AdministradorArchivos();
        String ruta = rutaDelArchivo.getText();
        ListaDoble lista = admin.getContentList(ruta);

        ArbolAVLPromedio arbolPromedio = new ArbolAVLPromedio();
        NodoDoble nodoActualPromedio = new NodoDoble(); //Nodoactual
        nodoActualPromedio = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActualPromedio;
        while (nodoActualPromedio != null) {
            egresadoActualPromedio = (Egresados) nodoActualPromedio.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActualPromedio.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolPromedio.setearRaiz(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            } else { //Si no es el primer elemento
                arbolPromedio.insertar(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            }
            nodoActualPromedio = nodoActualPromedio.getSiguiente();
        }

        ListaDoble indicesPromedio = new ListaDoble();
        indicesPromedio = arbolPromedio.obtenerListaDePromedio(promedioInt);

        if (indicesPromedio != null) {
            indicesPromedio.imprimir();
            model.removeAllElements();

            Nodo indiceActualProm = new Nodo();
            NodoDoble elementoActualProm = new NodoDoble();
            elementoActualProm = lista.getInicioListaDoble();
            Egresados egresadoProm;
            while (elementoActualProm != null) {
                egresadoProm = (Egresados) elementoActualProm.getDato();
                indiceActualProm = indicesPromedio.getInicio();
                while (indiceActualProm != null) {
                    if ((int) egresadoProm.getIndice() == (int) indiceActualProm.getDato()) {
                        model.addElement(egresadoProm.getTexto());
                    }
                    indiceActualProm = indiceActualProm.getSiguiente();
                }
                elementoActualProm = elementoActualProm.getSiguiente();
            }
        } else {
            JOptionPane.showMessageDialog(null, "El promedio no existe");
        }

    }//GEN-LAST:event_botonListarPromedioActionPerformed

    /**
     * Función para listar ciertas profesiones con cierto promedio único
     * @param evt
     */
    private void butonConMezclaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butonConMezclaActionPerformed
        // TODO add your handling code here:
        String promedio = this.promedioTexto.getText();
        int promedioInt = Integer.parseInt(promedio);
        String profesion = jTextField1.getText();

        AdministradorArchivos admin = new AdministradorArchivos();
        String ruta = rutaDelArchivo.getText();
        ListaDoble lista = admin.getContentList(ruta);

        /*              ARBOL DEL PROMEDIO       */
        ArbolAVLPromedio arbolPromedio = new ArbolAVLPromedio();
        NodoDoble nodoActualPromedio = new NodoDoble(); //Nodoactual
        nodoActualPromedio = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActualPromedio;
        while (nodoActualPromedio != null) {
            egresadoActualPromedio = (Egresados) nodoActualPromedio.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActualPromedio.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolPromedio.setearRaiz(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            } else { //Si no es el primer elemento
                arbolPromedio.insertar(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            }
            nodoActualPromedio = nodoActualPromedio.getSiguiente();
        }

        /*          ARBOL DE PROFESION              */
        ArbolAVLProfesion arbolProfesiones = new ArbolAVLProfesion();
        NodoDoble nodoActualProfesion = new NodoDoble(); //Nodoactual
        nodoActualProfesion = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActualProfesion;
        while (nodoActualProfesion != null) {
            egresadoActualProfesion = (Egresados) nodoActualProfesion.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActualProfesion.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolProfesiones.setearRaiz(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
            } else { //Si no es el primer elemento
                arbolProfesiones.insertar(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
            }
            nodoActualProfesion = nodoActualProfesion.getSiguiente();
        }

        /*              OBTENER TODOS LOS INDICES           */
        ListaDoble indicesPromedio = new ListaDoble();
        indicesPromedio = arbolPromedio.obtenerListaDePromedio(promedioInt);
        ListaDoble indices = new ListaDoble();
        indices = arbolProfesiones.obtenerListaDeProfesion(profesion);
        
        
        if (indices != null && indicesPromedio != null) {
            indicesPromedio.imprimir();
            indices.imprimir();
            /*                  VER INDICES REPETIDOS                   */
            ListaDoble listaDobleAux = new ListaDoble(); // Esta lista va a guardar los índices repetidos
            Nodo indiceAcutalProfesion = new Nodo(); //Creo una var Nodo que va a ir recorriendo todos los indices de profesion
            Nodo indiceActualPromedio = new Nodo();
            indiceAcutalProfesion = indices.getInicio(); //Ahora tiene el primer indice
            while (indiceAcutalProfesion != null) {
                indiceActualPromedio = indicesPromedio.getInicio(); //Ahora indiceActualPromedio tiene el primer índice de los promedios
                while (indiceActualPromedio != null) {
                    if ((int) indiceAcutalProfesion.getDato() == (int) indiceActualPromedio.getDato()) { // Si los índices son iguales
                        listaDobleAux.insertaFinal((int) indiceActualPromedio.getDato()); // Guardo el índice repetido
                    }
                    indiceActualPromedio = indiceActualPromedio.getSiguiente(); // El indice de la lista de promedios avanza al siguiente
                }
                indiceAcutalProfesion = indiceAcutalProfesion.getSiguiente(); // El indice de la profesion avanza al siguiente
            }
            listaDobleAux.imprimir();

            /*              COLOCAR VALORES                     */
            model.removeAllElements();

            Nodo indiceActualMix = new Nodo();
            NodoDoble elementoActualMix = new NodoDoble();
            elementoActualMix = lista.getInicioListaDoble();
            Egresados egresadoMix;
            while (elementoActualMix != null) {
                egresadoMix = (Egresados) elementoActualMix.getDato();
                indiceActualMix = listaDobleAux.getInicio();
                while (indiceActualMix != null) {
                    if ((int) egresadoMix.getIndice() == (int) indiceActualMix.getDato()) {
                        model.addElement(egresadoMix.getTexto());
                    }
                    indiceActualMix = indiceActualMix.getSiguiente();
                }
                elementoActualMix = elementoActualMix.getSiguiente();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Uno de los dos parámetros no existe");
        }
    }//GEN-LAST:event_butonConMezclaActionPerformed

    /**
     * Función para listar un cierto intervalo de promedios
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String limiteInferior = this.limiteInferior.getText();
        int limiteInfe = Integer.parseInt(limiteInferior);
        String limiteSuperior = this.limiteSuperior.getText();
        int limiteSuper = Integer.parseInt(limiteSuperior);

        AdministradorArchivos admin = new AdministradorArchivos();
        String ruta = rutaDelArchivo.getText();
        ListaDoble lista = admin.getContentList(ruta);

        /*              PRIMERO CREO EL ARBOL DE PROMEDIOS                  */
        ArbolAVLPromedio arbolPromedio = new ArbolAVLPromedio();
        NodoDoble nodoActualPromedio = new NodoDoble(); //Nodoactual
        nodoActualPromedio = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActualPromedio;
        while (nodoActualPromedio != null) {
            egresadoActualPromedio = (Egresados) nodoActualPromedio.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActualPromedio.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolPromedio.setearRaiz(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            } else { //Si no es el primer elemento
                arbolPromedio.insertar(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            }
            nodoActualPromedio = nodoActualPromedio.getSiguiente();
        }

        /*                  AHORA CREO LA LISTA DE LOS PROMEDIOS EN INTERVALO*/
        //MAS DE UN PROMEDIO
        if (limiteInfe >= 0 && limiteSuper <= 100) {
            ListaDoble listaPromedios = new ListaDoble(); //Esta lista va a tener todos los índices de cada lista que se cree
            ListaDoble indicesPromedioVariable = new ListaDoble(); //Esta lista va a obtener cada lista que se cree en el for
            Nodo indiceVariable = new Nodo(); //Este es el indice que se va a mover entre cada lista que se crea
            for (int i = limiteInfe; i <= limiteSuper; i++) {
                indicesPromedioVariable = arbolPromedio.obtenerListaDePromedio(i); //Obtengo la lista en ese momento
                indiceVariable = indicesPromedioVariable.getInicioListaDoble(); //Le doy el primer elemento de la lista justo creada
                while (indiceVariable.getSiguiente() != null) {
                    listaPromedios.insertaFinal((int) indiceVariable.getDato()); //Le inserto a la lista grande el valor en ese momento
                    indiceVariable = indiceVariable.getSiguiente();
                }
            }
            System.out.println("\n");
            listaPromedios.imprimir();

            model.removeAllElements();

            Nodo indiceActualProm = new Nodo();
            NodoDoble elementoActualProm = new NodoDoble();
            elementoActualProm = lista.getInicioListaDoble();
            Egresados egresadoProm;
            while (elementoActualProm != null) {
                egresadoProm = (Egresados) elementoActualProm.getDato();
                indiceActualProm = listaPromedios.getInicio();
                while (indiceActualProm != null) {
                    if ((int) egresadoProm.getIndice() == (int) indiceActualProm.getDato()) {
                        model.addElement(egresadoProm.getTexto());
                    }
                    indiceActualProm = indiceActualProm.getSiguiente();
                }
                elementoActualProm = elementoActualProm.getSiguiente();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Límites fuera de rango");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param evt
     */
    private void limiteSuperiorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limiteSuperiorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_limiteSuperiorActionPerformed

    /**
     * Función para buscar un egresado en el árbol AVL de egresados
     * @param evt
     */
    private void botonBuscarEgresadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarEgresadoActionPerformed
        // TODO add your handling code here:
        String egresado = textoEgresadoBuscar.getText();
        AdministradorArchivos admin = new AdministradorArchivos();
        String ruta = rutaDelArchivo.getText();
        ListaDoble lista = admin.getContentList(ruta);

        ArbolAVL arbolNombres = new ArbolAVL();
        NodoDoble nodoActual = new NodoDoble(); //Nodoactual
        nodoActual = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActual;
        while (nodoActual != null) {
            egresadoActual = (Egresados) nodoActual.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActual.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolNombres.setearRaiz(egresadoActual.getNombre(), (int) egresadoActual.getIndice());
            } else { //Si no es el primer elemento
                arbolNombres.insertar(egresadoActual.getNombre(), (int) egresadoActual.getIndice());
            }
            nodoActual = nodoActual.getSiguiente();
        }

        ListaDoble aux = new ListaDoble();
        aux = arbolNombres.obtenerListaDeNombre(egresado);
        System.out.println("\n");
        if (aux != null) {
            NodoDoble indiceaux = new NodoDoble();
            indiceaux = aux.getInicioListaDoble();
            int egresadoaux = (int) indiceaux.getDato();
            JOptionPane.showMessageDialog(null, "El egresado existe con el índice " + egresadoaux);
        } else {
            JOptionPane.showMessageDialog(null, "El egresado no existe");
        }
    }//GEN-LAST:event_botonBuscarEgresadoActionPerformed

    private void rutaDelArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rutaDelArchivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rutaDelArchivoActionPerformed

    /**
     * Función para listar profesiones con promedio de intervalos
     * @param evt 
     */
    private void botonParaListarProfesionConPromedioRangoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonParaListarProfesionConPromedioRangoActionPerformed
        // TODO add your handling code here:
        String profesion = jTextField1.getText();
        String limiteInferior = this.limiteInferior.getText();
        int limiteInfe = Integer.parseInt(limiteInferior);
        String limiteSuperior = this.limiteSuperior.getText();
        int limiteSuper = Integer.parseInt(limiteSuperior);

        AdministradorArchivos admin = new AdministradorArchivos();
        String ruta = rutaDelArchivo.getText();
        ListaDoble lista = admin.getContentList(ruta);

        /*              PRIMERO CREO EL ARBOL DE PROMEDIOS                  */
        ArbolAVLPromedio arbolPromedio = new ArbolAVLPromedio();
        NodoDoble nodoActualPromedio = new NodoDoble(); //Nodoactual
        nodoActualPromedio = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActualPromedio;
        while (nodoActualPromedio != null) {
            egresadoActualPromedio = (Egresados) nodoActualPromedio.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActualPromedio.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolPromedio.setearRaiz(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            } else { //Si no es el primer elemento
                arbolPromedio.insertar(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
            }
            nodoActualPromedio = nodoActualPromedio.getSiguiente();
        }

        /*          ARBOL DE PROFESION              */
        ArbolAVLProfesion arbolProfesiones = new ArbolAVLProfesion();
        NodoDoble nodoActualProfesion = new NodoDoble(); //Nodoactual
        nodoActualProfesion = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
        Egresados egresadoActualProfesion;
        while (nodoActualProfesion != null) {
            egresadoActualProfesion = (Egresados) nodoActualProfesion.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
            if (egresadoActualProfesion.getIndice() == 2) { //Si es el primer elemento de la lista
                arbolProfesiones.setearRaiz(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
            } else { //Si no es el primer elemento
                arbolProfesiones.insertar(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
            }
            nodoActualProfesion = nodoActualProfesion.getSiguiente();
        }


        /*                  AHORA CREO LA LISTA DE LOS PROMEDIOS EN INTERVALO*/
        //MAS DE UN PROMEDIO
        if (limiteInfe >= 0 && limiteSuper <= 100) {
            ListaDoble listaPromedios = new ListaDoble(); //Esta lista va a tener todos los índices de cada lista que se cree
            ListaDoble indicesPromedioVariable = new ListaDoble(); //Esta lista va a obtener cada lista que se cree en el for
            Nodo indiceVariable = new Nodo(); //Este es el indice que se va a mover entre cada lista que se crea
            for (int i = limiteInfe; i <= limiteSuper; i++) {
                indicesPromedioVariable = arbolPromedio.obtenerListaDePromedio(i); //Obtengo la lista en ese momento
                indiceVariable = indicesPromedioVariable.getInicioListaDoble(); //Le doy el primer elemento de la lista justo creada
                while (indiceVariable.getSiguiente() != null) {
                    listaPromedios.insertaFinal((int) indiceVariable.getDato()); //Le inserto a la lista grande el valor en ese momento
                    indiceVariable = indiceVariable.getSiguiente();
                }
            }

            ListaDoble indices = new ListaDoble();
            indices = arbolProfesiones.obtenerListaDeProfesion(profesion);

            if (indices != null && listaPromedios != null) {
                listaPromedios.imprimir();
                indices.imprimir();
                /*                  VER INDICES REPETIDOS                   */
                ListaDoble listaDobleAux = new ListaDoble(); // Esta lista va a guardar los índices repetidos
                Nodo indiceAcutalProfesion = new Nodo(); //Creo una var Nodo que va a ir recorriendo todos los indices de profesion
                Nodo indiceActualPromedio = new Nodo();
                indiceAcutalProfesion = indices.getInicio(); //Ahora tiene el primer indice
                while (indiceAcutalProfesion != null) {
                    indiceActualPromedio = listaPromedios.getInicio(); //Ahora indiceActualPromedio tiene el primer índice de los promedios
                    while (indiceActualPromedio != null) {
                        if ((int) indiceAcutalProfesion.getDato() == (int) indiceActualPromedio.getDato()) { // Si los índices son iguales
                            listaDobleAux.insertaFinal((int) indiceActualPromedio.getDato()); // Guardo el índice repetido
                        }
                        indiceActualPromedio = indiceActualPromedio.getSiguiente(); // El indice de la lista de promedios avanza al siguiente
                    }
                    indiceAcutalProfesion = indiceAcutalProfesion.getSiguiente(); // El indice de la profesion avanza al siguiente
                }
                listaDobleAux.imprimir();

                /*              COLOCAR VALORES                     */
                model.removeAllElements();

                Nodo indiceActualMix = new Nodo();
                NodoDoble elementoActualMix = new NodoDoble();
                elementoActualMix = lista.getInicioListaDoble();
                Egresados egresadoMix;
                while (elementoActualMix != null) {
                    egresadoMix = (Egresados) elementoActualMix.getDato();
                    indiceActualMix = listaDobleAux.getInicio();
                    while (indiceActualMix != null) {
                        if ((int) egresadoMix.getIndice() == (int) indiceActualMix.getDato()) {
                            model.addElement(egresadoMix.getTexto());
                        }
                        indiceActualMix = indiceActualMix.getSiguiente();
                    }
                    elementoActualMix = elementoActualMix.getSiguiente();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Uno de los dos parámetros no existe");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Límites fuera de rango");
        }
    }//GEN-LAST:event_botonParaListarProfesionConPromedioRangoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
                AdministradorArchivos admin = new AdministradorArchivos();
                ListaDoble lista = admin.getContentList("C:\\Users\\victo\\Desktop\\egresados.csv");
                lista.MostrarEgresadosConsola();

                /*                              ARBOL DE NOMBRES                                */
                //CREO EL ARBOL
                System.out.println("----------------------------------------------------------------");
                System.out.println("Se crea el árbol de nombres...");
                ArbolAVL arbolNombres = new ArbolAVL();
                NodoDoble nodoActual = new NodoDoble(); //Nodoactual
                nodoActual = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
                Egresados egresadoActual;
                while (nodoActual != null) {
                    egresadoActual = (Egresados) nodoActual.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
                    if (egresadoActual.getIndice() == 2) { //Si es el primer elemento de la lista
                        arbolNombres.setearRaiz(egresadoActual.getNombre(), (int) egresadoActual.getIndice());
                    } else { //Si no es el primer elemento
                        arbolNombres.insertar(egresadoActual.getNombre(), (int) egresadoActual.getIndice());
                    }
                    nodoActual = nodoActual.getSiguiente();
                }

                System.out.println("\nTODOS LOS INDICES DEL ARBOL DE NOMBRES");
                ListaDoble todosLosIndicesNombres = new ListaDoble();
                todosLosIndicesNombres = arbolNombres.getListaDobleTotal();
                todosLosIndicesNombres.imprimir();

                //IMPRIMIR TODO EL ARBOL
                arbolNombres.inOrden();
                //BUSCAR UNO EN PARTICULAR
                arbolNombres.buscar("Abril Guadalupe Escobedo Bojórquez");

                //OBTENER INDICE DADO UN NOMBRE
                ListaDoble aux = new ListaDoble();
                aux = arbolNombres.obtenerListaDeNombre("Abril Guadalupe Escobedo Bojórquez");
                System.out.println("\n");
                aux.imprimir();

                /*                          ARBOL DE PROFESIONES                        */
                //CREO EL ARBOL
                System.out.println("----------------------------------------------------------------");
                System.out.println("Se crea el árbol de profesiones...");
                ArbolAVLProfesion arbolProfesiones = new ArbolAVLProfesion();
                NodoDoble nodoActualProfesion = new NodoDoble(); //Nodoactual
                nodoActualProfesion = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
                Egresados egresadoActualProfesion;
                while (nodoActualProfesion != null) {
                    egresadoActualProfesion = (Egresados) nodoActualProfesion.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
                    if (egresadoActualProfesion.getIndice() == 2) { //Si es el primer elemento de la lista
                        arbolProfesiones.setearRaiz(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
                    } else { //Si no es el primer elemento
                        arbolProfesiones.insertar(egresadoActualProfesion.getProfesion(), egresadoActualProfesion.getIndice());
                    }
                    nodoActualProfesion = nodoActualProfesion.getSiguiente();
                }
                //OBTENER TODOS LOS INDICES DE UN ARBOL
                System.out.println("\nTODOS LOS INDICES DE PROFESION: ");
                ListaDoble todosLosIndices = new ListaDoble();
                todosLosIndices = arbolProfesiones.getTodosIndices(); //todosLosIndices es una lista doble que tiene TODOS los indices
                todosLosIndices.imprimir();

                //IMPRIMIR TODO EL ARBOL
                arbolProfesiones.inOrden();

                //BUSCAR SI UNA PROFESION EXISTE
                arbolProfesiones.buscar("Arquitecto");

                //OBTENER TODOS LOS INDICES DE LOS QUE TENGAN DICHA PROFESION
                ListaDoble indices = new ListaDoble();
                indices = arbolProfesiones.obtenerListaDeProfesion("Arquitecto");
                System.out.println("Todos los " + "arquitectos: ");
                indices.imprimir();
                System.out.println("\n");

                //ALGORITMO PARA IMPRIMIR CIERTA PROFESION
                Nodo indiceActual = new Nodo();
                NodoDoble elementoActual = new NodoDoble();
                elementoActual = lista.getInicioListaDoble();
                Egresados egresado;
                while (elementoActual != null) {
                    egresado = (Egresados) elementoActual.getDato();
                    indiceActual = indices.getInicio();
                    while (indiceActual != null) {
                        if ((int) egresado.getIndice() == (int) indiceActual.getDato()) {
                            System.out.println(egresado.getNombre());
                        }
                        indiceActual = indiceActual.getSiguiente();
                    }
                    elementoActual = elementoActual.getSiguiente();
                }

                /*                          ARBOL DE PROMEDIOS                        */
                //CREO EL ARBOL
                System.out.println("----------------------------------------------------------------");
                System.out.println("Se crea el árbol de promedios...");
                ArbolAVLPromedio arbolPromedio = new ArbolAVLPromedio();
                NodoDoble nodoActualPromedio = new NodoDoble(); //Nodoactual
                nodoActualPromedio = lista.getInicioListaDoble(); //Ahora tiene el primer elemento
                Egresados egresadoActualPromedio;
                while (nodoActualPromedio != null) {
                    egresadoActualPromedio = (Egresados) nodoActualPromedio.getDato(); //Ahora el egresado actual tiene los datos del nodo actual
                    if (egresadoActualPromedio.getIndice() == 2) { //Si es el primer elemento de la lista
                        arbolPromedio.setearRaiz(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
                    } else { //Si no es el primer elemento
                        arbolPromedio.insertar(egresadoActualPromedio.getPromedio(), egresadoActualPromedio.getIndice());
                    }
                    nodoActualPromedio = nodoActualPromedio.getSiguiente();
                }

                //OBTENER TODOS LOS INDICES DE UN ARBOL
                System.out.println("\nTODOS LOS INDICES DE PROMEDIO: ");
                ListaDoble todosLosIndicesPromedio = new ListaDoble();
                todosLosIndicesPromedio = arbolPromedio.getTodosIndices(); //todosLosIndices es una lista doble que tiene TODOS los indices
                todosLosIndicesPromedio.imprimir();

                //IMPRIMIR TODO EL ARBOL
                arbolPromedio.inOrden();

                //BUSCAR SI UNA PROFESION EXISTE
                arbolPromedio.buscar(77);

                //OBTENER TODOS LOS INDICES DE LOS QUE TENGAN DICHO PROMEDIO
                ListaDoble indicesPromedio = new ListaDoble();
                indicesPromedio = arbolPromedio.obtenerListaDePromedio(90);
                indicesPromedio.imprimir();

                //ALGORITMO PARA IMPRIMIR CIERTO PROMEDIO
                Nodo indiceActualProm = new Nodo();
                NodoDoble elementoActualProm = new NodoDoble();
                elementoActualProm = lista.getInicioListaDoble();
                Egresados egresadoProm;
                while (elementoActualProm != null) {
                    egresadoProm = (Egresados) elementoActualProm.getDato();
                    indiceActualProm = indicesPromedio.getInicio();
                    while (indiceActualProm != null) {
                        if ((int) egresadoProm.getIndice() == (int) indiceActualProm.getDato()) {
                            System.out.println(egresadoProm.getNombre());
                        }
                        indiceActualProm = indiceActualProm.getSiguiente();
                    }
                    elementoActualProm = elementoActualProm.getSiguiente();
                }

                /*                      ALGORITMOS PARA BUSQUEDAS COMPLEJAS                             */
                //BUSQUEDA COMPLEJA (CIERTA PROFESION CON CIERTO PROMEDIO)
                System.out.println("\n--------------------------------------------------------------------------\n");
                ListaDoble listaDobleAux = new ListaDoble(); // Esta lista va a guardar los índices repetidos
                Nodo indiceAcutalProfesion = new Nodo(); //Creo una var Nodo que va a ir recorriendo todos los indices de profesion
                Nodo indiceActualPromedio = new Nodo();
                indiceAcutalProfesion = indices.getInicio(); //Ahora tiene el primer indice
                while (indiceAcutalProfesion != null) {
                    indiceActualPromedio = indicesPromedio.getInicio(); //Ahora indiceActualPromedio tiene el primer índice de los promedios
                    while (indiceActualPromedio != null) {
                        if ((int) indiceAcutalProfesion.getDato() == (int) indiceActualPromedio.getDato()) { // Si los índices son iguales
                            listaDobleAux.insertaFinal((int) indiceActualPromedio.getDato()); // Guardo el índice repetido
                        }
                        indiceActualPromedio = indiceActualPromedio.getSiguiente(); // El indice de la lista de promedios avanza al siguiente
                    }
                    indiceAcutalProfesion = indiceAcutalProfesion.getSiguiente(); // El indice de la profesion avanza al siguiente
                }

                listaDobleAux.imprimir();

                //MAS DE UN PROMEDIO
                ListaDoble listaPromedios = new ListaDoble(); //Esta lista va a tener todos los índices de cada lista que se cree
                ListaDoble indicesPromedioVariable = new ListaDoble(); //Esta lista va a obtener cada lista que se cree en el for
                Nodo indiceVariable = new Nodo(); //Este es el indice que se va a mover entre cada lista que se crea
                for (int i = 90; i <= 100; i++) {
                    indicesPromedioVariable = arbolPromedio.obtenerListaDePromedio(i); //Obtengo la lista en ese momento
                    indiceVariable = indicesPromedioVariable.getInicio(); //Le doy el primer elemento de la lista justo creada
                    while (indiceVariable.getSiguiente() != null) {
                        listaPromedios.insertaFinal((int) indiceVariable.getDato()); //Le inserto a la lista grande el valor en ese momento
                        indiceVariable = indiceVariable.getSiguiente();
                    }
                }
                System.out.println("\n");
                listaPromedios.imprimir();

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btnañadir;
    private javax.swing.JButton botonBuscarEgresado;
    private javax.swing.JButton botonListarPromedio;
    private javax.swing.JButton botonParaListarProfesion;
    private javax.swing.JButton botonParaListarProfesionConPromedioRango;
    private javax.swing.JButton butonConMezcla;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField limiteInferior;
    private javax.swing.JTextField limiteSuperior;
    private javax.swing.JTextField promedioTexto;
    private javax.swing.JTextField rutaDelArchivo;
    private javax.swing.JTextField textoEgresadoBuscar;
    // End of variables declaration//GEN-END:variables
}
